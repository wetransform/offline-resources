/*
 * Build for update site.
 *
 * Requires artifacts to have beend published locally.
 * (We use them instead of the Jars directly for adding the Maven dependency
 * information to the manifests)
 *
 * Currently only builds an update site with only the CURRENT versions.
 * This is intended for keeping dependent projects up-to-date with the latest
 * versions.
 */

import org.osgi.framework.Version

buildscript {
  repositories {
    mavenCentral()
    maven {
      url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
  }
  dependencies {
    classpath 'org.standardout:bnd-platform:3.2.1'

    // for Version class
    classpath 'org.osgi:osgi.core:8.0.0'
  }
  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
  }
}

apply plugin: 'org.standardout.bnd-platform'

/*
 * Currently the SNAPSHOT versions needs to be used for support for appending
 * to existing update sites and creating version files.
plugins {
  id "org.standardout.bnd-platform" version "3.0.1"
}
*/

def pubs = file(project.findProperty('publications') ?: file('build/jars'))
def pubGroup = project.findProperty('groupId') ?: 'to.wetransform.offline-resources'

repositories {
  mavenLocal()
}

configurations.all {
  // ensure SNAPSHOTs are updated every time if needed
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

def isCI = "true".equals(System.getenv("CI"))

platform {
  featureId = 'to.wetransform.offlineresources.feature'
  featureName = 'Offline Resources'

  addBndPlatformManifestHeaders = true

  // if in CI update existing update site in 'p2' folder
  // otherwise use build folder to create update site
  updateSiteDir = isCI ? file('p2') : new File(buildDir, 'updatesite')
  appendUpdateSite = isCI
  // create version files for use as Renovate data source
  createFeatureVersionFiles = true

  // bundles

  def artifactVersions = [:] // map artifact name to release version

  pubs.listFiles().each { File file ->
    if (file.name.endsWith('.jar')) {
      // create a publication for each JAR

      def name = file.name.substring(0, file.name.length() - 4)
      def parts = name.split(/_/)
      def jarVersion = parts[-1]
      name = parts[0..-2].join('_')
      boolean snapshot = jarVersion.endsWith('-SNAPSHOT')

      if (!snapshot) {
        artifactVersions[name] = jarVersion
      }
    }
  }

  def collectedVersions = []

  artifactVersions.each { name, releaseVersion ->
    def versionObj = Version.parseVersion(releaseVersion)

    if (!versionObj) {
      throw new IllegalStateException("Version $releaseVersion cannot be parsed as OSGi version")
    }

    // define bundle - Maven dependency points to latest version
    bundle "${pubGroup}:${name}:${releaseVersion}", {
      bnd {
        // set release version as bundle version
        version = releaseVersion
        // only resources contained, don't export packages
        instruction 'Export-Package', ''
        instruction 'Private-Package', '*'
      }
    }

    // collect versions to determine feature version
    collectedVersions.add(versionObj)

  }

  // set feature version
  featureVersion = collectedVersions.sort()[-1].toString()

}
